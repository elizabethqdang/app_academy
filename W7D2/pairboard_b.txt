Partner B

1. What is an object?
    It is an instance of a class. It's also the root class in ruby.

2. Explain a ||= b. 
    If a is truthy, then a is not reassigned. If a is falsey, then b. 

3. What is unit testing? What is the primary technique. 
    Testing methods on the smallest units (testing one class)
    Write down expectations before you write your code and then you write the code to meet the expecations and refactor until there are no errors.

4. object

class ParkingLot
    
    def initialize
        @levels = #generate levels
    end

    def parked_vehice(vehicle)
        # park a vehicle in a spot
    end

end

class Level

    def initialize(floor, num_of_spots)
        @spots = #generate spots
        @available_spots = num_of_spots
        @floor = floor
    end

    def park_vehicle(vehicle)
        #find a place to park
    end

    def park_starting_at(spot_num, vehicle)
        # park vehicle starting at spot_num 
    end

    def find_available_spots(vehicle)
        # find a spot to park 
    end

    def spot_freed
        @available_spots += 1
    end 

end

class ParkingSpot
    attr_reader :row, :spot_num 
    
    def initialize(size, level, row, spot_num)
        @vehicle = nil
        @spot_size = size
        @level = level
        @row = row
        @spot_num = spot_num
    end 

    def its_free?
        !@vehicle
    end

    def can_fit_vehicle?(vehicle)
        # check if it will fit
    end

    def park(vehicle)
        # park in spot 
    end

    def unparked
        # remove vehicle from spot 
    end
end

class Vehicle
    attr_reader :spots_needed, :size

    def initialize(license_plate)
        @parking_spots = []
        @license_plate = license_plate
    end

    def parking_spot(spot) 
        #...
    end

    def clear_spots
        #...
    end

    def can_fit_in_spot(spot)
        #...
    end
end

class Car < Vehicle
    def initialize
        super
        @spots_needed = 1
        @size = :compact
    end

end

class Bus < Vehicle

    def initialize
        super
        @spots_needed = 5
        @size = :large
    end
end

class Motorcycle < Vehicle
    def initialize
        super
        @spots_needed = 1
        @size = :compact
    end
end


4. DFS

class Node

    def dfs(&prc)
        raise "some error" if prc.nil?

        return self if prc.call(self)

        self.children.each do |child|
            result = child.dfs(&prc)
            return result if result
        end

        nil
    end

end